buildscript {
	repositories {
		maven { url = 'https://files.minecraftforge.net/maven' }
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
	}
}
apply plugin: 'net.minecraftforge.gradle'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = modMinecraftVersion + "-" + modVersion
group = modGroup
archivesBaseName = modFileName

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

repositories {

	// Put other remote maven repositories here

}

minecraft {
	// the mappings can be changed at any time, and must be in the following format.
	// snapshot_YYYYMMDD   snapshot are built nightly.
	// stable_#            stables are built at the discretion of the MCP team.
	// Use non-default mappings at your own risk. they may not always work.
	// simply re-run your setup task after changing the mappings to update your workspace.
	mappings channel: modMcpMappingsChannel, version: modMcpMappingsVersion
	// makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	// default run configurations.
	// these can be tweaked, removed, or duplicated as needed.
	runs {
		client = {
			// recommended logging data for a userdev environment
			properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
			// recommended logging level for the console
			properties 'forge.logging.console.level': 'debug'
			workingDirectory project.file('run').canonicalPath
			source sourceSets.main
		}
		server = {
			// recommended logging data for a userdev environment
			properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
			// recommended logging level for the console
			properties 'forge.logging.console.level': 'debug'
			workingDirectory project.file('run').canonicalPath
			source sourceSets.main
		}
	}
}

dependencies {
	// Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
	// that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
	// The userdev artifact is a special name and will get all sorts of transformations applied to it.
	minecraft "net.minecraftforge:forge:" + modMinecraftVersion + "-" + modForgeVersion

	// you may put jars on which you depend on in ./libs
	// or you may define them like so..
	//compile "some.group:artifact:version:classifier"
	//compile "some.group:artifact:version"

	// real examples
	//compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
	//compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

	// the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
	//provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

	// These dependencies get remapped to your current MCP mappings
	//deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

	// for more info...
	// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
	// http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	manifest {
		attributes([
				"Specification-Title"     : modId,
				"Specification-Vendor"    : modGroup,
				"Specification-Version"   : "25.0", // We are version 1 of the modlauncher specification
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : "${version}",
				"Implementation-Vendor"   : modGroup,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"Signing-Fingerprint"     : project.findProperty('signSHA1')
		],)
	}
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
	type 'jar'
	builtBy 'reobfJar'
}
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact reobfArtifact
		}
	}
	repositories {
		maven {
			url "file:///${project.projectDir}/mcmodsrepo"
		}
	}
}

import net.minecraftforge.gradle.common.task.SignJar

task signJar(type: SignJar, dependsOn: jar) {

	// Skips if the keyStore property is missing.
	onlyIf {
		project.hasProperty('keyStore')
	}

	// findProperty allows us to reference the property without it existing.
	// Using project.propName would cause the script to fail validation if the property did not exist.
	keyStore = project.findProperty('keyStore')
	alias = project.findProperty('keyStoreAlias')
	storePass = project.findProperty('keyStorePass')
	keyPass = project.findProperty('keyStoreKeyPass')
	inputFile = jar.archivePath
	outputFile = jar.archivePath

}

// Runs this task automatically when build is run.
build.dependsOn signJar

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property 'version', project.version

	// replace stuff in mods.toml, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'META-INF/mods.toml'

		// replace version and mcversion
		expand 'version':project.version
	}

	// copy everything else except the mods.toml
	from(sourceSets.main.resources.srcDirs) {
		exclude 'META-INF/mods.toml'
	}
}
