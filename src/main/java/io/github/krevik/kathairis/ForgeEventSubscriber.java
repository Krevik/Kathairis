package io.github.krevik.kathairis;

import net.minecraftforge.fml.common.Mod.EventBusSubscriber;

import static io.github.krevik.kathairis.util.ModReference.MOD_ID;
import static net.minecraftforge.fml.common.Mod.EventBusSubscriber.Bus.FORGE;

/**
 * @author Cadiboo
 */
@EventBusSubscriber(modid = MOD_ID, bus = FORGE)
public final class ForgeEventSubscriber {

    /*@SubscribeEvent
    public static void onEatenEvents(LivingEntityUseItemEvent event){
        if(event.getItem().getItem() == ModItems.HEART){
            event.getEntityLiving().heal(2F);
        }
        if(event.getItem().getItem() == ModItems.MAGIC_BEANS){
            setRandomPotionEffectOnPlayer(event.getEntityLiving());
        }
        if(event.getItem().getItem() == ModItems.NECTAR_BOWL){
            event.getEntityLiving().heal(2f);
        }
    }

    private static void setRandomPotionEffectOnPlayer(LivingEntity ep) {
        Random random = ep.getRNG();
        ArrayList<Effect> allowedEffects = new ArrayList<>();
        allowedEffects.add(Effects.SPEED);
        allowedEffects.add(Effects.HASTE);
        allowedEffects.add(Effects.STRENGTH);
        allowedEffects.add(Effects.INSTANT_HEALTH);
        allowedEffects.add(Effects.JUMP_BOOST);
        allowedEffects.add(Effects.REGENERATION);
        allowedEffects.add(Effects.RESISTANCE);
        allowedEffects.add(Effects.FIRE_RESISTANCE);
        allowedEffects.add(Effects.WATER_BREATHING);
        allowedEffects.add(Effects.INVISIBILITY);
        allowedEffects.add(Effects.NIGHT_VISION);
        allowedEffects.add(Effects.HEALTH_BOOST);
        allowedEffects.add(Effects.ABSORPTION);
        allowedEffects.add(Effects.SATURATION);
        allowedEffects.add(Effects.GLOWING);
        allowedEffects.add(Effects.LUCK);
        allowedEffects.add(Effects.SLOW_FALLING);
        allowedEffects.add(Effects.CONDUIT_POWER);
        allowedEffects.add(Effects.DOLPHINS_GRACE);
        allowedEffects.add(Effects.BAD_OMEN);
        ep.addPotionEffect(new EffectInstance(allowedEffects.get(random.nextInt(allowedEffects.size())),300+random.nextInt(2000),random.nextInt(5)));
    }
/*
	@SubscribeEvent
	public static void writeAssets(final ModelBakeEvent ignored) {

		if (true) {
			return;
		}

		if (!ModUtil.isDeveloperEnvironment()) {
			return;
		}

		final String username = System.getProperty("user.name");

		if (!username.equals("Cadiboo")) {
			return;
		}

		final String RESOURCES_DIR = "/Users/" + username + "/Developer/Modding/Kathairis/src/main/resources/";
		final String ASSETS_DIR = RESOURCES_DIR + "assets/" + MOD_ID + "/";
		final String DATA_DIR = RESOURCES_DIR + "data/" + MOD_ID + "/";

		Paths.get(ASSETS_DIR).toFile().mkdirs();
		Paths.get(DATA_DIR).toFile().mkdirs();

		final ResourceLocation ITEM_GENERATED = new ResourceLocation("", "item/generated");
		final ResourceLocation ITEM_HANDHELD = new ResourceLocation("", "item/handheld");
		final String ITEM_DEFAULT_TEXTURE_NAME = "layer0";

		final HashMap<String, String> blockstates = new HashMap<>();

		ModUtil.getModEntries(ForgeRegistries.BLOCKS).forEach(block -> {

			final String name = block.getRegistryName().getPath();

			final ImmutableList<IBlockState> validStates = block.getStateContainer().getValidStates();
			if (validStates.size() == 1) {
				final String blockstate = "" +
						"{\n" +
						"\t\"variants\": {\n" +
						"\t\t\"\": {\n" +
						"\t\t\t\"model\": \"kathairis:block/" + name + "\"\n" +
						"\t\t}\n" +
						"\t}\n" +
						"}\n";

				blockstates.put(name, blockstate);
			} else {
				StringBuilder blockstate = new StringBuilder("" +
						"{\n" +
						"\t\"variants\": {\n");
				for (int i = 0; i < validStates.size(); i++) {
					final IBlockState validState = validStates.get(i);
					final String propertiesString = validState.getProperties().stream().map(property -> property.getName().toLowerCase() + "=" + validState.get(property).toString().toLowerCase()).collect(Collectors.joining(","));

					blockstate.append("\t\t\"").append(propertiesString).append("\": {\n");
					blockstate.append("\t\t\t\"model\": \"kathairis:block/autogenerated\"\n");
					blockstate.append("\t\t}");
					if (i < validStates.size() - 1)
						blockstate.append(",");
					blockstate.append("\n");
				}

				blockstate.append("" + "\t}\n" + "}\n");

				blockstates.put(name, blockstate.toString());
			}

		});

		blockstates.forEach((name, state) -> {
			final ArrayList<String> data = new ArrayList<>(Arrays.asList(state.split("\n")));
			data.removeIf(String::isEmpty);

			final Path file = Paths.get(ASSETS_DIR + "blockstates/" + name.toLowerCase() + ".json");
			file.toFile().getParentFile().mkdirs();
			try {
				KATHAIRIS_LOG.info("Writing Blockstate " + name.toLowerCase() + ".json");
				Files.write(file, data, Charset.forName("UTF-8"));
			} catch (final IOException e) {
				e.printStackTrace();
			}

		});

	}
*/
}
